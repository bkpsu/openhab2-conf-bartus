
/* Begin LED Strip Group 1 (Outdoor) rules */

rule "LED Strip Group 1 (Outdoor) JSON Color Single Strip"
when Member of gLEDStrip_Outdoor_Color received update
then 
 	val source = triggeringItem.name.split("_Color").get(0)
	logInfo("LED", "Source " + source)
	val item = gLEDStrip_Outdoor.members.findFirst[ l | l.name == source ] as StringItem
	logInfo("LED", "Item " + item.name)
	item.sendCommand("{\"color\": {" + 
		"\"r\": " + (triggeringItem.state as HSBType).red.intValue.toString + "," +
		"\"g\": " + (triggeringItem.state as HSBType).green.intValue.toString + "," +
		"\"b\": " + (triggeringItem.state as HSBType).blue.intValue.toString + "}}") end

rule "LED Strip Group 1 (Outdoor) JSON Speed Single Strip"
when Member of gLEDStrip_Outdoor_Speed received update
then 
	val source = triggeringItem.name.split("_Speed").get(0)
	val value = triggeringItem.state as Number
	logInfo("LED", "Source " + source)
	val item = gLEDStrip_Outdoor.members.findFirst[ l | l.name == source ] as StringItem
	item.sendCommand("{\"transition\": \"" + (value / 100 * 240).intValue.toString + "\"}") end

rule "LED Strip Group 1 (Outdoor) JSON Intensity Single Strip"
when Member of gLEDStrip_Outdoor_Intensity received update
then 
	val source = triggeringItem.name.split("_Intensity").get(0)
	val value = triggeringItem.state as Number
	logInfo("LED", "Source " + source)
	val item = gLEDStrip_Outdoor.members.findFirst[ l | l.name == source ] as StringItem
	item.sendCommand("{\"brightness\":" + (value / 100 * 255).intValue.toString + "}") end

/* Begin Group 2 (Kitchen) LED Strip Rules */

rule "LED Strip Group 1 (Kitchen) JSON Color Single Strip"
when Member of gLEDStrip_Kitchen_Color received update
then 
 	val source = triggeringItem.name.split("_Color").get(0)
	val item = gLEDStrip_Kitchen.members.findFirst[ l | l.name == source ] as StringItem
	item.sendCommand("{\"color\": {" + 
		"\"r\": " + (triggeringItem.state as HSBType).red.intValue.toString + "," +
		"\"g\": " + (triggeringItem.state as HSBType).green.intValue.toString + "," +
		"\"b\": " + (triggeringItem.state as HSBType).blue.intValue.toString + "}}") end

rule "LED Strip Group 1 (Kitchen) JSON Speed Single Strip"
when Member of gLEDStrip_Kitchen_Speed received update
then 
	val source = triggeringItem.name.split("_Speed").get(0)
	val value = triggeringItem.state as Number
	logInfo("LED", "Source " + source)
	val item = gLEDStrip_Kitchen.members.findFirst[ l | l.name == source ] as StringItem
	item.sendCommand("{\"transition\": \"" + (value / 100 * 240).intValue.toString + "\"}") end

rule "LED Strip Group 1 (Kitchen) JSON Intensity Single Strip"
when Member of gLEDStrip_Kitchen_Intensity received update
then 
	val source = triggeringItem.name.split("_Intensity").get(0)
	val value = triggeringItem.state as Number
	logInfo("LED", "Source " + source)
	val item = gLEDStrip_Kitchen.members.findFirst[ l | l.name == source ] as StringItem
	item.sendCommand("{\"brightness\":" + (value / 100 * 255).intValue.toString + "}") end
